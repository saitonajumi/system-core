extend type Query {
    "Find a single user by an identifying attribute."
    user(
        "Search by primary key."
        id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

        "Search by email address."
        email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
        "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
        name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)
    allUsers (
        first: Int
        page: Int
        student: String
        registration_type : String
        status: String
    ): JsonResponse
}

type Mutation {
    createUser(
        name: String
        email: String
        password: String
        email_verified_at: String
        remember_token: String
        registration_type: String
        status: String
        created_by: String
        updated_by: String
        created_at: String
        updated_at: String
        disable_by: String
        disable_at: String
    ): User @create @validate(rules: "rules", column: "name")
}

"Account of a person who utilizes this application."
type User {
    id: ID!
    name: String
    email: String
    email_verified_at: String
    remember_token: String
    registration_type: String
    status: String
    created_by: String
    updated_by: String
    created_at: String
    updated_at: String
    disable_by: String
    disable_at: String
}
